// Copyright 2024 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package secretflow.scql;
option java_outer_classname = "ScqlTaskConfig";


option java_package = "org.secretflow.scql";
option go_package = "github.com/secretflow/scqlagent/pkg/proto/taskconfig";

message ScqlTaskInputConfig {
  // unique id for scql task, should only contain alphabet and number, e.g:
  // 'project01'
  string project_id = 1;
  // scql query, e.g: 'SELECT COUNT(*) FROM ta;'
  string query = 2;
  // tables for each party
  map<string, TableList> tables = 3;
  // ccls for each party to grant
  map<string, PrivacyPolicy> ccls = 4;
  // output ids for each party
  map<string, string> output_ids = 5;
  string initiator = 6;
}

message TableList {repeated TableMeta tbls = 1;}

// messages copyed from
message TableMeta {
  string table_name = 1;
  string ref_table = 2;
  string db_type = 3;
  // party code of table owner
  string table_owner = 4;

  message Column {
    string name = 1;
    string dtype = 2;
  }
  repeated Column columns = 5;
}

message PrivacyPolicy {repeated ColumnControl column_control_list = 1;}

message ColumnControl {
  ColumnDef col = 1;
  // the code of party that the constraint applies to.
  string party_code = 2;
  Constraint constraint = 3;
}

message ColumnDef {
  string column_name = 1;
  string table_name = 2;
}

enum BrokerProtocolVersion {
  BROKER_SERVICE_PROTOCOL_V1 = 0;
}

enum Constraint {
  UNKNOWN = 0;
  // The column can be revealed at party_code.
  PLAINTEXT = 1;
  // The column or any column produced by it can NOT be revealed at
  // party_code. It can be used as condition in JOIN, WHERE, and GROUP BY.
  ENCRYPTED_ONLY = 2;
  // The column can be revealed at party_code if it is used as join key
  PLAINTEXT_AFTER_JOIN = 3;
  // The column can be revealed at party_code if it is used as group by key
  PLAINTEXT_AFTER_GROUP_BY = 4;
  // The column can be revealed at party_code, if and only if
  // it is the result of the comparison function e.g. select compare1 >
  // compare2 from t group by zip_code
  PLAINTEXT_AFTER_COMPARE = 5;
  // The column can be revealed at party_code, if and only if
  // it has been through a N to 1 mapping such as
  //     - Aggregation operation such as sum/min/max/avg/count, e.g.
  //          select avg(score) from t group by zip_code
  //          select avg(score) from t
  PLAINTEXT_AFTER_AGGREGATE = 6;
  // The column can be revealed at party_code if it is used as join payload.
  // For example:
  //   select t2.id, t2.col1 from t1 inner join t2 on t1.id = t2.id;
  // In the above query, t2.col1 is used as join payload, t2.id is used as
  // join key.
  PLAINTEXT_AS_JOIN_PAYLOAD = 7;
  // The column is not able to be revealed at the party_code but the rank of
  // this column can be revealed at party_code
  // e.g.
  // SELECT ROW_NUMBER() OVER(PARTITITON BY department ORDER BY salary DESC)
  // AS rank in the query above the salary and department are not supposed
  // to be revealed to the party_code, however the rank of salary in this
  // department is visible
  REVEAL_RANK = 8;
}